# Copyright 2025 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/c++/modules.gni")
import("//build/config/clang/clang.gni")

if (is_ios) {
  import("//build/config/ios/ios_sdk.gni")
  sdk_path = ios_sdk_path
}

if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
  sdk_path = mac_sdk_path
}

configs_to_add = [
  "//buildtools/third_party/libc++:config",
  "//build/config/compiler:no_chromium_code",
]

configs_to_remove = [
  "//build/config/compiler:chromium_code",
  "//build/config/coverage:default_coverage",
]

if (use_clang_modules) {
  template("clang_module") {
    source_set(target_name) {
      forward_variables_from(invoker, "*", [ "modulemap" ])
      use_libcxx_modules = false
      sources = [ invoker.modulemap ]
      if (!defined(public_deps)) {
        public_deps = []
      }
      if (is_ios) {
        public_deps += [ "//buildtools/third_party/libc++:copy_sysroot_modulemaps($default_toolchain)" ]
      }

      # Implicit module maps won't work on apple because we're currently
      # missing some dependencies.
      if (use_autogenerated_modules) {
        if (!defined(cflags)) {
          cflags = []
        }

        # Note that this in addition to, not instead of explicit modulemaps.
        # This is simply to allow us to catch missing modules we depend on.
        cflags += [ "-fimplicit-module-maps" ]
      } else {
        if (!defined(public_configs)) {
          public_configs = []
        }

        # By always including all module maps, we can get it to error out if
        # we attempt to include something not in your dependencies.
        # Otherwise, it would silently add it to your own AST.
        public_configs += [
          "//buildtools/third_party/libc++:builtin_modulemap",
          "//buildtools/third_party/libc++:libcxx_modulemap",
          "//buildtools/third_party/libc++:sysroot_modulemaps",
        ]
      }
      configs -= configs_to_remove
      configs += configs_to_add
    }
  }

  template("builtin_module") {
    # This is a template to build modules that reside in clang builtin's module file.
    clang_module(target_name) {
      forward_variables_from(invoker, "*")
      modulemap = "${clang_base_path}/lib/clang/${clang_version}/include/module.modulemap"
      if (use_autogenerated_modules) {
        public_configs = [ "//buildtools/third_party/libc++:builtin_modulemap" ]
      }
    }
  }

  template("libcxx_module") {
    # This is a template to build modules that reside in libc++'s module file.
    clang_module(target_name) {
      forward_variables_from(invoker, "*")
      modulemap = "${root_build_dir}/gen/third_party/libc++/src/include/module.modulemap"
      deps = [
        "//buildtools/third_party/libc++:copy_custom_headers($default_toolchain)",
        "//buildtools/third_party/libc++:copy_libcxx_headers($default_toolchain)",
      ]
      if (use_autogenerated_modules) {
        public_configs = [ "//buildtools/third_party/libc++:libcxx_modulemap" ]
      }
    }
  }

  if (use_autogenerated_modules) {
    template("sysroot_module") {
      clang_module(target_name) {
        forward_variables_from(invoker, "*")
        modulemap = "module.modulemap"
        public_configs = [ ":sysroot_modulemap" ]
      }
    }
  } else if (is_apple) {
    template("DarwinBasic_module") {
      clang_module(target_name) {
        forward_variables_from(invoker, "*")
        modulemap = "$sdk_path/usr/include/DarwinBasic.modulemap"
      }
    }
    template("DarwinFoundation_module") {
      clang_module(target_name) {
        forward_variables_from(invoker, "*")
        modulemap = "$sdk_path/usr/include/DarwinFoundation.modulemap"
      }
    }
    template("c_standard_library_module") {
      clang_module(target_name) {
        forward_variables_from(invoker, "*")
        modulemap = "$sdk_path/usr/include/c_standard_library.modulemap"
      }
    }
  } else {
    template("sysroot_module") {
      clang_module(target_name) {
        forward_variables_from(invoker, "*")
        modulemap = sysroot_modulemap
        deps = [
          ":copy_custom_headers($default_toolchain)",
          ":copy_libcxx_headers($default_toolchain)",
        ]
      }
    }
  }
}

template("modulemap_config") {
  config(target_name) {
    path = rebase_path(invoker.source, root_build_dir)
    cflags_cc = [ "-fmodule-map-file=${path}" ]
  }
}
